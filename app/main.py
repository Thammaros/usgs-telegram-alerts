import time
from config import Config
from storage import (
    read_last_event_id,
    save_last_event_id,
)
from usgs_api import USGSEarthquakeAPI
from telegram import TelegramBot
from logger import logger
from geopy.distance import geodesic
from mapgen import generate_cartopy_map


def format_message(props, coords, quake_time, distance_km) -> str:
    lon, lat, depth = coords
    mag = props.get("mag", "N/A")
    mag_type = props.get("magType", "N/A")
    place = props.get("place", "Unknown location")
    alert = props.get("alert", "N/A")
    tsunami = "‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á" if props.get("tsunami", 0) == 1 else "‡πÑ‡∏°‡πà‡∏°‡∏µ"
    cdi = props.get("cdi", "N/A")
    mmi = props.get("mmi", "N/A")
    url = props.get("url", "N/A")
    net = props.get("net", "N/A")
    sources = props.get("sources", "N/A")

    return f"""
        üìå <b>‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô‡πÑ‡∏´‡∏ß‡πÉ‡∏Å‡∏•‡πâ: {place}</b>
        üìè <b>‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì:</b> {distance_km:.2f} ‡∏Å‡∏°.
        üïí <b>‡πÄ‡∏ß‡∏•‡∏≤:</b> {quake_time}
        üåç <b>‡∏Ç‡∏ô‡∏≤‡∏î:</b> M{mag} ({mag_type})
        üìâ <b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å:</b> {depth} ‡∏Å‡∏°.
        üìà <b>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏™‡∏±‡πà‡∏ô:</b> CDI: {cdi}, MMI: {mmi}

        üö® <b>‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (PAGER):</b> {alert}
        üåä <b>‡∏™‡∏∂‡∏ô‡∏≤‡∏°‡∏¥:</b> {tsunami}

        üì° <b>‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢:</b> {net}
        üõ∞Ô∏è <b>‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:</b> {sources}
        üîé <b>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</b> <a href="{url}">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏à‡∏≤‡∏Å USGS</a>
        """


def handle_new_earthquake(
    api: USGSEarthquakeAPI, bot: TelegramBot, quake, last_event_id: str
) -> str:
    event_id = quake["id"]

    if event_id == last_event_id:
        logger.info("No new event.")
        return last_event_id

    props = quake["properties"]
    coords = quake["geometry"]["coordinates"]
    quake_lat, quake_lon = coords[1], coords[0]
    place = props.get("place", "Unknown location")
    quake_time = api.format_quake_time(props["time"])

    # Calculate distance
    distance_km = geodesic(
        (Config.BANGKOK_LAT, Config.BANGKOK_LON), (quake_lat, quake_lon)
    ).km

    # If too far, skip alert
    if distance_km > 2500:
        logger.info(
            f"Earthquake too far ({distance_km:.2f} km > 2500 km). Skipping alert."
        )
        return last_event_id

    # Format and send alert
    message = format_message(props, coords, quake_time, distance_km)
    logger.info("New earthquake detected within 2500 km.")
    image_path = generate_cartopy_map(quake_lat, quake_lon, place, distance_km)
    bot.send_photo(image_path)
    bot.send_message(message)
    save_last_event_id(event_id)

    return event_id


def monitor_loop():
    bot = TelegramBot(Config.TELEGRAM_BOT_TOKEN)
    chat_id = bot.load_or_fetch_chat_id()

    if not chat_id:
        return

    api = USGSEarthquakeAPI()
    last_event_id = read_last_event_id()

    while True:
        try:
            result = api.query(minmagnitude=5, orderby="time", limit=1)

            if result.get("features"):
                quake = result["features"][0]
                last_event_id = handle_new_earthquake(api, bot, quake, last_event_id)
            else:
                logger.warning("No earthquake data found.")

        except Exception as e:
            logger.error(f"Exception occurred: {e}", exc_info=True)

        time.sleep(Config.FETCH_INTERVAL_SECONDS)


if __name__ == "__main__":
    logger.info("Starting USGS Earthquake Monitoring Service...")
    monitor_loop()
